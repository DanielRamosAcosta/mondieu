import Kodi from 'kodi-ws'
import moment from 'moment'

import { seek, executeAction, fetchTime } from '~/scripts/actions/kodiActions'

const kodiMiddleware = (() => {
  let connection
  let intervalVirtualSeek

  const OnPlay = store => evt => {
    store.dispatch(fetchTime())
    store.dispatch(executeAction('play', 'kodi'))
  }

  const OnPause = store => evt => {
    store.dispatch(executeAction('pause', 'kodi'))
  }

  const OnStop = store => evt => {
    store.dispatch(executeAction('stop', 'kodi'))
  }

  const OnSeek = store => evt => {
    let newtime = moment.duration(evt.data.player.time)
    store.dispatch(seek(newtime, 'kodi'))
  }

  const virtualSeek = (store, action) => {
    if (action === 'play') {
      intervalVirtualSeek = setInterval(() => {
        store.dispatch(fetchTime())
      }, 500)
    } else {
      if (intervalVirtualSeek) {
        clearInterval(intervalVirtualSeek)
        intervalVirtualSeek = null
      }
    }
  }

  const getPlayerId = () => {
    return new Promise((resolve, reject) => {
      connection.Player.GetActivePlayers().then(players => {
        if (players.length >= 1) {
          resolve(players[0].playerid)
        } else {
          resolve(null)
        }
      })
    })
  }

  const bindEvents = store => {
    connection.Player.OnPlay(OnPlay(store))
    connection.Player.OnPause(OnPause(store))
    connection.Player.OnStop(OnStop(store))
    connection.Player.OnSeek(OnSeek(store))
  }

  return store => next => action => {
    // If action is generated by Kodi
    if (action.payload && (action.payload.origin === 'kodi')) {
      switch (action.type) {
        case 'EXECUTE_ACTION': {
          action.payload = action.payload.action
          console.log(action.payload)
          virtualSeek(store, action.payload)
          break
        }
        case 'SEEK': {
          action.payload = action.payload.time
          break
        }
      }
      return next(action)
    }

    // If action is generated by UI
    switch (action.type) {
      case 'KODI_CONNECT': {
        let [ _, host ] = location.host.match(/(.+):(.+)/)
        action.payload = Kodi(host, 9090).then((conn) => {
          connection = conn
          bindEvents(store)
          console.log(connection)
        })
        break
      }
      case 'FETCH_TIME': {
        action.payload = new Promise((resolve, reject) => {
          getPlayerId().then(playerid => {
            if (playerid !== null) {
              connection.Player.GetProperties(playerid, ['time' ,'totaltime']).then(({ time, totaltime }) => {
                time = moment.duration(time)
                totaltime = moment.duration(totaltime)
                if (time.asMilliseconds() < 0) {
                  time = moment.duration(0)
                }
                resolve({time, totaltime})
              })
            } else {
              resolve({time: moment.duration(0), totaltime: moment.duration(0)})
            }
          })
        })
        break
      }
      case 'FETCH_CONTROLS': {
        action.payload = new Promise((resolve, reject) => {
          getPlayerId().then(playerid => {
            let action
            if (playerid !== null) {
              connection.Player.GetProperties(playerid, ['speed']).then(({ speed }) => {
                speed ? action = 'play' : action = 'pause'
                virtualSeek(store, action)
                return resolve(action)
              })
            } else {
              action = 'stop'
              virtualSeek(store, action)
              return resolve(action)
            }
          })
        })
        break
      }
      case 'EXECUTE_ACTION': {
        connection.Input.ExecuteAction(action.payload.action)
        return
      }
      case 'SEEK': {
        getPlayerId().then(playerid => {
          if (playerid !== null) {
            let { time } = action.payload
            connection.Player.Seek(playerid, {
              hours: time.hours(),
              minutes: time.minutes(),
              seconds: time.seconds(),
              milliseconds: Math.floor(time.milliseconds())
            })
          }
        })
        return
      }
      case 'FETCH_MOVIES': {
        action.payload = new Promise((resolve, reject) => {
          let { cuantity, lastItem } = action.payload
          var batch = connection.batch();

          var movies = batch.VideoLibrary.GetMovies([
            'title',
            'year',
            'thumbnail',
            'playcount'
          ], {"start" : lastItem, "end": 100}, {method: 'title'})
          // TODO: Cambiar el start y el end
          var favourites = batch.Favourites.GetFavourites()

          batch.send()

          Promise.all([movies, favourites]).then(function([ { movies }, { favourites } ]) {
            console.log(favourites)
            movies.forEach(movie => {
              // 1. Set if movie is favorite
              movie.favorite = false
              if (favourites) {
                favourites.forEach(favorite => {
                  if(movie.title === favorite.title) {
                    movie.favorite = true
                    return
                  }
                })
              }

              // 2. Fix thumbnail
              movie.thumbnail = movie.thumbnail.replace(/%3a/g, ':').replace(/%2f/g, '/').substring(8).slice(0, -1)

              // 3. Set if viewed
              movie.viewed = movie.playcount > 0

              // 4. Change movieid
              movie.id = movie.movieid

              // 4. Delete unused keys
              delete movie.label
              delete movie.movieid
              delete movie.playcount
            })

            console.log(movies)

            resolve(movies)
          })
        })
      }
    }
    return next(action)
  }
})()

export default kodiMiddleware
